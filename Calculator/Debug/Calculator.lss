
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a0c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000a0c  00000a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e69  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d4  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ca3  00000000  00000000  0000349d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00004140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000744  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016df  00000000  00000000  00004aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00006183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4d 03 	call	0x69a	; 0x69a <main>
  7a:	0c 94 04 05 	jmp	0xa08	; 0xa08 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_Write>:
#include "DIO.h"

void DIO_Write(DIO_ChannelTypes ChannelId, STD_LevelTypes Level)
{
	DIO_PortTypes Portx = ChannelId/8;
	DIO_ChannelTypes ChannelPos = ChannelId%8;
  82:	98 2f       	mov	r25, r24
  84:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <DIO_Write+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <DIO_Write+0x1c>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <DIO_Write+0x90>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <DIO_Write+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <DIO_Write+0xca>
  9c:	08 95       	ret
		case DIO_PortA:
		if (Level == STD_High)
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <DIO_Write+0x3a>
		{
			SetBit(PORTA_Reg, ChannelPos);
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_Write+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	9a 95       	dec	r25
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_Write+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA_Reg, ChannelPos);
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_Write+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	9a 95       	dec	r25
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_Write+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (Level == STD_High)
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_Write+0x74>
		{
			SetBit(PORTB_Reg, ChannelPos);
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_Write+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_Write+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB_Reg, ChannelPos);
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_Write+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	9a 95       	dec	r25
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_Write+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (Level == STD_High)
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <DIO_Write+0xae>
		{
			SetBit(PORTC_Reg, ChannelPos);
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_Write+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	9a 95       	dec	r25
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_Write+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
		}
		else
		{
			ClearBit(PORTC_Reg, ChannelPos);
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_Write+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	9a 95       	dec	r25
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_Write+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (Level == STD_High)
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <DIO_Write+0xe8>
		{
			SetBit(PORTD_Reg, ChannelPos);
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_Write+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_Write+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
		}
		else
		{
			ClearBit(PORTD_Reg, ChannelPos);
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_Write+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_Write+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_Init>:
	{Input, STD_Low},
	{Input, STD_Low}
};

void DIO_Init()
{
 186:	e0 e6       	ldi	r30, 0x60	; 96
 188:	f0 e0       	ldi	r31, 0x00	; 0
	Uint8 count = 0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
 18a:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg, ChannelPos);
			}
			else
			{
				ClearBit(DDRB_Reg, ChannelPos);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
	{
		Portx = count/8;
		ChannelPos = count%8;
 190:	28 2f       	mov	r18, r24
 192:	27 70       	andi	r18, 0x07	; 7
		switch(Portx)
 194:	98 2f       	mov	r25, r24
 196:	96 95       	lsr	r25
 198:	96 95       	lsr	r25
 19a:	96 95       	lsr	r25
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	09 f1       	breq	.+66     	; 0x1e2 <DIO_Init+0x5c>
 1a0:	30 f0       	brcs	.+12     	; 0x1ae <DIO_Init+0x28>
 1a2:	92 30       	cpi	r25, 0x02	; 2
 1a4:	c1 f1       	breq	.+112    	; 0x216 <DIO_Init+0x90>
 1a6:	93 30       	cpi	r25, 0x03	; 3
 1a8:	09 f4       	brne	.+2      	; 0x1ac <DIO_Init+0x26>
 1aa:	4f c0       	rjmp	.+158    	; 0x24a <DIO_Init+0xc4>
 1ac:	67 c0       	rjmp	.+206    	; 0x27c <DIO_Init+0xf6>
		{
			case  DIO_PortA:
			if (PinCfg[count].PinDir == Output)
 1ae:	90 81       	ld	r25, Z
 1b0:	91 30       	cpi	r25, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg, ChannelPos);
 1b4:	9a b3       	in	r25, 0x1a	; 26
 1b6:	ba 01       	movw	r22, r20
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_Init+0x38>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	2a 95       	dec	r18
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_Init+0x34>
 1c2:	9b 01       	movw	r18, r22
 1c4:	29 2b       	or	r18, r25
 1c6:	2a bb       	out	0x1a, r18	; 26
 1c8:	59 c0       	rjmp	.+178    	; 0x27c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg, ChannelPos);
 1ca:	3a b3       	in	r19, 0x1a	; 26
 1cc:	ba 01       	movw	r22, r20
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_Init+0x4e>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	2a 95       	dec	r18
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_Init+0x4a>
 1d8:	96 2f       	mov	r25, r22
 1da:	90 95       	com	r25
 1dc:	93 23       	and	r25, r19
 1de:	9a bb       	out	0x1a, r25	; 26
 1e0:	4d c0       	rjmp	.+154    	; 0x27c <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortB:
			if (PinCfg[count].PinDir == Output)
 1e2:	90 81       	ld	r25, Z
 1e4:	91 30       	cpi	r25, 0x01	; 1
 1e6:	59 f4       	brne	.+22     	; 0x1fe <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg, ChannelPos);
 1e8:	97 b3       	in	r25, 0x17	; 23
 1ea:	ba 01       	movw	r22, r20
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_Init+0x6c>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_Init+0x68>
 1f6:	9b 01       	movw	r18, r22
 1f8:	29 2b       	or	r18, r25
 1fa:	27 bb       	out	0x17, r18	; 23
 1fc:	3f c0       	rjmp	.+126    	; 0x27c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg, ChannelPos);
 1fe:	37 b3       	in	r19, 0x17	; 23
 200:	ba 01       	movw	r22, r20
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_Init+0x82>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	2a 95       	dec	r18
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_Init+0x7e>
 20c:	96 2f       	mov	r25, r22
 20e:	90 95       	com	r25
 210:	93 23       	and	r25, r19
 212:	97 bb       	out	0x17, r25	; 23
 214:	33 c0       	rjmp	.+102    	; 0x27c <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortC:
			if (PinCfg[count].PinDir == Output)
 216:	90 81       	ld	r25, Z
 218:	91 30       	cpi	r25, 0x01	; 1
 21a:	59 f4       	brne	.+22     	; 0x232 <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg, ChannelPos);
 21c:	94 b3       	in	r25, 0x14	; 20
 21e:	ba 01       	movw	r22, r20
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_Init+0xa0>
 222:	66 0f       	add	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	2a 95       	dec	r18
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_Init+0x9c>
 22a:	9b 01       	movw	r18, r22
 22c:	29 2b       	or	r18, r25
 22e:	24 bb       	out	0x14, r18	; 20
 230:	25 c0       	rjmp	.+74     	; 0x27c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg, ChannelPos);
 232:	34 b3       	in	r19, 0x14	; 20
 234:	ba 01       	movw	r22, r20
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_Init+0xb6>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	2a 95       	dec	r18
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_Init+0xb2>
 240:	96 2f       	mov	r25, r22
 242:	90 95       	com	r25
 244:	93 23       	and	r25, r19
 246:	94 bb       	out	0x14, r25	; 20
 248:	19 c0       	rjmp	.+50     	; 0x27c <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortD:
			if (PinCfg[count].PinDir == Output)
 24a:	90 81       	ld	r25, Z
 24c:	91 30       	cpi	r25, 0x01	; 1
 24e:	59 f4       	brne	.+22     	; 0x266 <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg, ChannelPos);
 250:	91 b3       	in	r25, 0x11	; 17
 252:	ba 01       	movw	r22, r20
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_Init+0xd4>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	2a 95       	dec	r18
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_Init+0xd0>
 25e:	9b 01       	movw	r18, r22
 260:	29 2b       	or	r18, r25
 262:	21 bb       	out	0x11, r18	; 17
 264:	0b c0       	rjmp	.+22     	; 0x27c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg, ChannelPos);
 266:	31 b3       	in	r19, 0x11	; 17
 268:	ba 01       	movw	r22, r20
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_Init+0xea>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	2a 95       	dec	r18
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_Init+0xe6>
 274:	96 2f       	mov	r25, r22
 276:	90 95       	com	r25
 278:	93 23       	and	r25, r19
 27a:	91 bb       	out	0x11, r25	; 17
void DIO_Init()
{
	Uint8 count = 0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	32 96       	adiw	r30, 0x02	; 2
 280:	80 32       	cpi	r24, 0x20	; 32
 282:	09 f0       	breq	.+2      	; 0x286 <DIO_Init+0x100>
 284:	85 cf       	rjmp	.-246    	; 0x190 <DIO_Init+0xa>
				ClearBit(DDRD_Reg, ChannelPos);
			}
			break;
		}
	}
 286:	08 95       	ret

00000288 <check1>:

#include "KeyPad.h"

unsigned char check1() //check on coloumn
{
	PORTD = 0b11111110;
 288:	8e ef       	ldi	r24, 0xFE	; 254
 28a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	82 e5       	ldi	r24, 0x52	; 82
 290:	97 e0       	ldi	r25, 0x07	; 7
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <check1+0xa>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <check1+0x14>
 29c:	00 00       	nop
	unsigned char res = 0;
	_delay_ms(150);
	if (GetBit(PIND,c1) == 0)
 29e:	84 99       	sbic	0x10, 4	; 16
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <check1+0x30>
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	81 ee       	ldi	r24, 0xE1	; 225
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <check1+0x20>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <check1+0x2a>
 2b2:	00 00       	nop
	{
		_delay_ms(100);
		res='=';
 2b4:	8d e3       	ldi	r24, 0x3D	; 61
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <check1+0x32>
#include "KeyPad.h"

unsigned char check1() //check on coloumn
{
	PORTD = 0b11111110;
	unsigned char res = 0;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
	{
		_delay_ms(100);
		res='=';
		//while(GetBit(PIND,r1) == 0);
	}
	if (GetBit(PIND,c2) == 0)
 2ba:	85 99       	sbic	0x10, 5	; 16
 2bc:	0a c0       	rjmp	.+20     	; 0x2d2 <check1+0x4a>
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	81 ee       	ldi	r24, 0xE1	; 225
 2c2:	94 e0       	ldi	r25, 0x04	; 4
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <check1+0x3c>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <check1+0x46>
 2ce:	00 00       	nop
	{
		_delay_ms(100);
		res='/';
 2d0:	8f e2       	ldi	r24, 0x2F	; 47
		//while(GetBit(PIND,r2) == 0);
	}
	if (GetBit(PIND,c3) == 0)
 2d2:	86 99       	sbic	0x10, 6	; 16
 2d4:	0a c0       	rjmp	.+20     	; 0x2ea <check1+0x62>
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	81 ee       	ldi	r24, 0xE1	; 225
 2da:	94 e0       	ldi	r25, 0x04	; 4
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <check1+0x54>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <check1+0x5e>
 2e6:	00 00       	nop
	{
		_delay_ms(100);
		res='-';
 2e8:	8d e2       	ldi	r24, 0x2D	; 45
		//while(GetBit(PIND,r3) == 0);
	}
	if (GetBit(PIND,c4) == 0)
 2ea:	87 99       	sbic	0x10, 7	; 16
 2ec:	0a c0       	rjmp	.+20     	; 0x302 <check1+0x7a>
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	81 ee       	ldi	r24, 0xE1	; 225
 2f2:	94 e0       	ldi	r25, 0x04	; 4
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <check1+0x6c>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <check1+0x76>
 2fe:	00 00       	nop
	{
		_delay_ms(100);
		res='+';
 300:	8b e2       	ldi	r24, 0x2B	; 43
		//while(GetBit(PIND,r4) == 0);
	}
	
	return res;
}
 302:	08 95       	ret

00000304 <check2>:
unsigned char check2()
{
	PORTD = 0b11111101;
 304:	8d ef       	ldi	r24, 0xFD	; 253
 306:	82 bb       	out	0x12, r24	; 18
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	82 e5       	ldi	r24, 0x52	; 82
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <check2+0xa>
 316:	00 c0       	rjmp	.+0      	; 0x318 <check2+0x14>
 318:	00 00       	nop
	unsigned char res = 0;
	_delay_ms(150);
	if (GetBit(PIND,c1) == 0)
 31a:	84 99       	sbic	0x10, 4	; 16
 31c:	0b c0       	rjmp	.+22     	; 0x334 <check2+0x30>
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	81 ee       	ldi	r24, 0xE1	; 225
 322:	94 e0       	ldi	r25, 0x04	; 4
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <check2+0x20>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <check2+0x2a>
 32e:	00 00       	nop
	{
		_delay_ms(100);
		res='#'; 
 330:	83 e2       	ldi	r24, 0x23	; 35
 332:	01 c0       	rjmp	.+2      	; 0x336 <check2+0x32>
	return res;
}
unsigned char check2()
{
	PORTD = 0b11111101;
	unsigned char res = 0;
 334:	80 e0       	ldi	r24, 0x00	; 0
	{
		_delay_ms(100);
		res='#'; 
		//while(GetBit(PIND,r1) == 0);
	}
	if (GetBit(PIND,c2) == 0)
 336:	85 99       	sbic	0x10, 5	; 16
 338:	0a c0       	rjmp	.+20     	; 0x34e <check2+0x4a>
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	81 ee       	ldi	r24, 0xE1	; 225
 33e:	94 e0       	ldi	r25, 0x04	; 4
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <check2+0x3c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <check2+0x46>
 34a:	00 00       	nop
	{
		_delay_ms(100);
		res='9';
 34c:	89 e3       	ldi	r24, 0x39	; 57
		//while(GetBit(PIND,r2) == 0);
	}
	if (GetBit(PIND,c3) == 0)
 34e:	86 99       	sbic	0x10, 6	; 16
 350:	0a c0       	rjmp	.+20     	; 0x366 <check2+0x62>
 352:	2f ef       	ldi	r18, 0xFF	; 255
 354:	81 ee       	ldi	r24, 0xE1	; 225
 356:	94 e0       	ldi	r25, 0x04	; 4
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <check2+0x54>
 360:	00 c0       	rjmp	.+0      	; 0x362 <check2+0x5e>
 362:	00 00       	nop
	{
		_delay_ms(100);
		res='6';
 364:	86 e3       	ldi	r24, 0x36	; 54
		//while(GetBit(PIND,r3) == 0);
	}
	if (GetBit(PIND,c4) == 0)
 366:	87 99       	sbic	0x10, 7	; 16
 368:	0a c0       	rjmp	.+20     	; 0x37e <check2+0x7a>
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	81 ee       	ldi	r24, 0xE1	; 225
 36e:	94 e0       	ldi	r25, 0x04	; 4
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <check2+0x6c>
 378:	00 c0       	rjmp	.+0      	; 0x37a <check2+0x76>
 37a:	00 00       	nop
	{
		_delay_ms(100);
		res='3';
 37c:	83 e3       	ldi	r24, 0x33	; 51
		//while(GetBit(PIND,r4) == 0);
	}
	return res;
}
 37e:	08 95       	ret

00000380 <check3>:

unsigned char check3()
{
	PORTD = 0b11111011;
 380:	8b ef       	ldi	r24, 0xFB	; 251
 382:	82 bb       	out	0x12, r24	; 18
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	82 e5       	ldi	r24, 0x52	; 82
 388:	97 e0       	ldi	r25, 0x07	; 7
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <check3+0xa>
 392:	00 c0       	rjmp	.+0      	; 0x394 <check3+0x14>
 394:	00 00       	nop
	unsigned char res = 0;
	_delay_ms(150);
	if (GetBit(PIND,c1) == 0)
 396:	84 99       	sbic	0x10, 4	; 16
 398:	0b c0       	rjmp	.+22     	; 0x3b0 <check3+0x30>
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	81 ee       	ldi	r24, 0xE1	; 225
 39e:	94 e0       	ldi	r25, 0x04	; 4
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <check3+0x20>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <check3+0x2a>
 3aa:	00 00       	nop
	{
		_delay_ms(100);
		res='0';
 3ac:	80 e3       	ldi	r24, 0x30	; 48
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <check3+0x32>
}

unsigned char check3()
{
	PORTD = 0b11111011;
	unsigned char res = 0;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
	{
		_delay_ms(100);
		res='0';
		//while(GetBit(PIND,r1) == 0);
	}
	if (GetBit(PIND,c2) == 0)
 3b2:	85 99       	sbic	0x10, 5	; 16
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <check3+0x4a>
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	81 ee       	ldi	r24, 0xE1	; 225
 3ba:	94 e0       	ldi	r25, 0x04	; 4
 3bc:	21 50       	subi	r18, 0x01	; 1
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <check3+0x3c>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <check3+0x46>
 3c6:	00 00       	nop
	{
		_delay_ms(100);
		res='8';
 3c8:	88 e3       	ldi	r24, 0x38	; 56
		//while(GetBit(PIND,r2) == 0);
	}
	if (GetBit(PIND,c3) == 0)
 3ca:	86 99       	sbic	0x10, 6	; 16
 3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <check3+0x62>
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	81 ee       	ldi	r24, 0xE1	; 225
 3d2:	94 e0       	ldi	r25, 0x04	; 4
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <check3+0x54>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <check3+0x5e>
 3de:	00 00       	nop
	{
		_delay_ms(100);
		res='5';
 3e0:	85 e3       	ldi	r24, 0x35	; 53
		//while(GetBit(PIND,r3) == 0);
	}
	if (GetBit(PIND,c4) == 0)
 3e2:	87 99       	sbic	0x10, 7	; 16
 3e4:	0a c0       	rjmp	.+20     	; 0x3fa <check3+0x7a>
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	81 ee       	ldi	r24, 0xE1	; 225
 3ea:	94 e0       	ldi	r25, 0x04	; 4
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <check3+0x6c>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <check3+0x76>
 3f6:	00 00       	nop
	{
		_delay_ms(100);
		res='2';
 3f8:	82 e3       	ldi	r24, 0x32	; 50
		//while(GetBit(PIND,r4) == 0);
	}
	return res;
}
 3fa:	08 95       	ret

000003fc <check4>:

unsigned char check4()
{
	PORTD = 0b11110111;
 3fc:	87 ef       	ldi	r24, 0xF7	; 247
 3fe:	82 bb       	out	0x12, r24	; 18
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	82 e5       	ldi	r24, 0x52	; 82
 404:	97 e0       	ldi	r25, 0x07	; 7
 406:	21 50       	subi	r18, 0x01	; 1
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
	unsigned char res = 0;
	_delay_ms(150);
	if (GetBit(PIND,c1) == 0)
 412:	84 99       	sbic	0x10, 4	; 16
 414:	0b c0       	rjmp	.+22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	81 ee       	ldi	r24, 0xE1	; 225
 41a:	94 e0       	ldi	r25, 0x04	; 4
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
	{
		_delay_ms(100);
		res='x'; //*
 428:	88 e7       	ldi	r24, 0x78	; 120
 42a:	01 c0       	rjmp	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
}

unsigned char check4()
{
	PORTD = 0b11110111;
	unsigned char res = 0;
 42c:	80 e0       	ldi	r24, 0x00	; 0
	{
		_delay_ms(100);
		res='x'; //*
		//while(GetBit(PIND,r1) == 0);
	}
	if (GetBit(PIND,c2) == 0)
 42e:	85 99       	sbic	0x10, 5	; 16
 430:	0a c0       	rjmp	.+20     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 432:	2f ef       	ldi	r18, 0xFF	; 255
 434:	81 ee       	ldi	r24, 0xE1	; 225
 436:	94 e0       	ldi	r25, 0x04	; 4
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	80 40       	sbci	r24, 0x00	; 0
 43c:	90 40       	sbci	r25, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
	{
		_delay_ms(100);
		res='7';
 444:	87 e3       	ldi	r24, 0x37	; 55
		//while(GetBit(PIND,r2) == 0);
	}
	if (GetBit(PIND,c3) == 0)
 446:	86 99       	sbic	0x10, 6	; 16
 448:	0a c0       	rjmp	.+20     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 44a:	2f ef       	ldi	r18, 0xFF	; 255
 44c:	81 ee       	ldi	r24, 0xE1	; 225
 44e:	94 e0       	ldi	r25, 0x04	; 4
 450:	21 50       	subi	r18, 0x01	; 1
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
	{
		_delay_ms(100);
		res='4';
 45c:	84 e3       	ldi	r24, 0x34	; 52
		//while(GetBit(PIND,c3) == 0);
	}
	if (GetBit(PIND,c4) == 0)
 45e:	87 99       	sbic	0x10, 7	; 16
 460:	0a c0       	rjmp	.+20     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	81 ee       	ldi	r24, 0xE1	; 225
 466:	94 e0       	ldi	r25, 0x04	; 4
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop
	{
		_delay_ms(100);
		res='1';
 474:	81 e3       	ldi	r24, 0x31	; 49
		//while(GetBit(PIND,r4) == 0);
	}
	
	return res;
}
 476:	08 95       	ret

00000478 <GetKey>:

unsigned char GetKey()
{
	unsigned char res = 0;
	res = check1();
 478:	0e 94 44 01 	call	0x288	; 0x288 <check1>
	if (res != 0) return res;
 47c:	81 11       	cpse	r24, r1
 47e:	0c c0       	rjmp	.+24     	; 0x498 <GetKey+0x20>
	res = check2();
 480:	0e 94 82 01 	call	0x304	; 0x304 <check2>
	if (res != 0) return res;
 484:	81 11       	cpse	r24, r1
 486:	08 c0       	rjmp	.+16     	; 0x498 <GetKey+0x20>
	res = check3();
 488:	0e 94 c0 01 	call	0x380	; 0x380 <check3>
	if (res != 0) return res;
 48c:	81 11       	cpse	r24, r1
 48e:	04 c0       	rjmp	.+8      	; 0x498 <GetKey+0x20>
	res = check4();
 490:	0e 94 fe 01 	call	0x3fc	; 0x3fc <check4>
	if (res != 0) return res;
 494:	81 11       	cpse	r24, r1
 496:	00 c0       	rjmp	.+0      	; 0x498 <GetKey+0x20>
 498:	08 95       	ret

0000049a <LCD_Cmd>:
		case 2:
		LCD_Cmd(0xC0);
		LCD_String(string);
		break;
	}
}
 49a:	cf 93       	push	r28
 49c:	c8 2f       	mov	r28, r24
 49e:	8b b3       	in	r24, 0x1b	; 27
 4a0:	8f 70       	andi	r24, 0x0F	; 15
 4a2:	9c 2f       	mov	r25, r28
 4a4:	90 7f       	andi	r25, 0xF0	; 240
 4a6:	89 2b       	or	r24, r25
 4a8:	8b bb       	out	0x1b, r24	; 27
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	89 e0       	ldi	r24, 0x09	; 9
 4ae:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	8b e0       	ldi	r24, 0x0B	; 11
 4b6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 4ba:	8f e8       	ldi	r24, 0x8F	; 143
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <LCD_Cmd+0x24>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <LCD_Cmd+0x2a>
 4c4:	00 00       	nop
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	8b e0       	ldi	r24, 0x0B	; 11
 4ca:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 4ce:	8f e1       	ldi	r24, 0x1F	; 31
 4d0:	9e e4       	ldi	r25, 0x4E	; 78
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <LCD_Cmd+0x38>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <LCD_Cmd+0x3e>
 4d8:	00 00       	nop
 4da:	8b b3       	in	r24, 0x1b	; 27
 4dc:	28 2f       	mov	r18, r24
 4de:	2f 70       	andi	r18, 0x0F	; 15
 4e0:	30 e1       	ldi	r19, 0x10	; 16
 4e2:	c3 9f       	mul	r28, r19
 4e4:	c0 01       	movw	r24, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	82 2b       	or	r24, r18
 4ea:	8b bb       	out	0x1b, r24	; 27
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	89 e0       	ldi	r24, 0x09	; 9
 4f0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	8b e0       	ldi	r24, 0x0B	; 11
 4f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 4fc:	8f e8       	ldi	r24, 0x8F	; 143
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <LCD_Cmd+0x66>
 504:	00 c0       	rjmp	.+0      	; 0x506 <LCD_Cmd+0x6c>
 506:	00 00       	nop
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	8b e0       	ldi	r24, 0x0B	; 11
 50c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 510:	8f e3       	ldi	r24, 0x3F	; 63
 512:	9f e1       	ldi	r25, 0x1F	; 31
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <LCD_Cmd+0x7a>
 518:	00 c0       	rjmp	.+0      	; 0x51a <LCD_Cmd+0x80>
 51a:	00 00       	nop
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <LCD_Init>:
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	8a e0       	ldi	r24, 0x0A	; 10
 524:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 528:	2f ef       	ldi	r18, 0xFF	; 255
 52a:	89 ef       	ldi	r24, 0xF9	; 249
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	21 50       	subi	r18, 0x01	; 1
 530:	80 40       	sbci	r24, 0x00	; 0
 532:	90 40       	sbci	r25, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <LCD_Init+0xe>
 536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_Init+0x18>
 538:	00 00       	nop
 53a:	83 e3       	ldi	r24, 0x33	; 51
 53c:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 540:	8f e1       	ldi	r24, 0x1F	; 31
 542:	93 e0       	ldi	r25, 0x03	; 3
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <LCD_Init+0x24>
 548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_Init+0x2a>
 54a:	00 00       	nop
 54c:	82 e3       	ldi	r24, 0x32	; 50
 54e:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 552:	88 e2       	ldi	r24, 0x28	; 40
 554:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 558:	86 e0       	ldi	r24, 0x06	; 6
 55a:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 55e:	88 e1       	ldi	r24, 0x18	; 24
 560:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 564:	8c e0       	ldi	r24, 0x0C	; 12
 566:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 570:	8f e3       	ldi	r24, 0x3F	; 63
 572:	9f e1       	ldi	r25, 0x1F	; 31
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <LCD_Init+0x54>
 578:	00 c0       	rjmp	.+0      	; 0x57a <LCD_Init+0x5a>
 57a:	00 00       	nop
 57c:	08 95       	ret

0000057e <LCD_Char>:
 57e:	cf 93       	push	r28
 580:	c8 2f       	mov	r28, r24
 582:	8b b3       	in	r24, 0x1b	; 27
 584:	8f 70       	andi	r24, 0x0F	; 15
 586:	9c 2f       	mov	r25, r28
 588:	90 7f       	andi	r25, 0xF0	; 240
 58a:	89 2b       	or	r24, r25
 58c:	8b bb       	out	0x1b, r24	; 27
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	89 e0       	ldi	r24, 0x09	; 9
 592:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	8b e0       	ldi	r24, 0x0B	; 11
 59a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 59e:	8f e8       	ldi	r24, 0x8F	; 143
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_Char+0x24>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCD_Char+0x2a>
 5a8:	00 00       	nop
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	8b e0       	ldi	r24, 0x0B	; 11
 5ae:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 5b2:	8f e1       	ldi	r24, 0x1F	; 31
 5b4:	9e e4       	ldi	r25, 0x4E	; 78
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCD_Char+0x38>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <LCD_Char+0x3e>
 5bc:	00 00       	nop
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	28 2f       	mov	r18, r24
 5c2:	2f 70       	andi	r18, 0x0F	; 15
 5c4:	30 e1       	ldi	r19, 0x10	; 16
 5c6:	c3 9f       	mul	r28, r19
 5c8:	c0 01       	movw	r24, r0
 5ca:	11 24       	eor	r1, r1
 5cc:	82 2b       	or	r24, r18
 5ce:	8b bb       	out	0x1b, r24	; 27
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	89 e0       	ldi	r24, 0x09	; 9
 5d4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	8b e0       	ldi	r24, 0x0B	; 11
 5dc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 5e0:	8f e8       	ldi	r24, 0x8F	; 143
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <LCD_Char+0x66>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <LCD_Char+0x6c>
 5ea:	00 00       	nop
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	8b e0       	ldi	r24, 0x0B	; 11
 5f0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 5f4:	8f e3       	ldi	r24, 0x3F	; 63
 5f6:	9f e1       	ldi	r25, 0x1F	; 31
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_Char+0x7a>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_Char+0x80>
 5fe:	00 00       	nop
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <LCD_String>:
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	fc 01       	movw	r30, r24
 60c:	80 81       	ld	r24, Z
 60e:	88 23       	and	r24, r24
 610:	59 f0       	breq	.+22     	; 0x628 <LCD_String+0x24>
 612:	8f 01       	movw	r16, r30
 614:	c0 e0       	ldi	r28, 0x00	; 0
 616:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Char>
 61a:	cf 5f       	subi	r28, 0xFF	; 255
 61c:	f8 01       	movw	r30, r16
 61e:	ec 0f       	add	r30, r28
 620:	f1 1d       	adc	r31, r1
 622:	80 81       	ld	r24, Z
 624:	81 11       	cpse	r24, r1
 626:	f7 cf       	rjmp	.-18     	; 0x616 <LCD_String+0x12>
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	08 95       	ret

00000630 <LCD_StringPos>:
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	ec 01       	movw	r28, r24
 636:	61 30       	cpi	r22, 0x01	; 1
 638:	19 f0       	breq	.+6      	; 0x640 <LCD_StringPos+0x10>
 63a:	62 30       	cpi	r22, 0x02	; 2
 63c:	51 f0       	breq	.+20     	; 0x652 <LCD_StringPos+0x22>
 63e:	11 c0       	rjmp	.+34     	; 0x662 <LCD_StringPos+0x32>
 640:	84 2f       	mov	r24, r20
 642:	8f 70       	andi	r24, 0x0F	; 15
 644:	80 68       	ori	r24, 0x80	; 128
 646:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 64a:	ce 01       	movw	r24, r28
 64c:	0e 94 02 03 	call	0x604	; 0x604 <LCD_String>
 650:	08 c0       	rjmp	.+16     	; 0x662 <LCD_StringPos+0x32>
 652:	84 2f       	mov	r24, r20
 654:	8f 70       	andi	r24, 0x0F	; 15
 656:	80 6c       	ori	r24, 0xC0	; 192
 658:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 65c:	ce 01       	movw	r24, r28
 65e:	0e 94 02 03 	call	0x604	; 0x604 <LCD_String>
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <LCD_ClearbyLine>:

void LCD_ClearbyLine(Uint8 line)
{
	switch (line)
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	19 f0       	breq	.+6      	; 0x672 <LCD_ClearbyLine+0xa>
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	49 f0       	breq	.+18     	; 0x682 <LCD_ClearbyLine+0x1a>
 670:	08 95       	ret
	{
		case 1:
		LCD_Cmd(0x80);
 672:	80 e8       	ldi	r24, 0x80	; 128
 674:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
		LCD_String("                ");
 678:	80 ea       	ldi	r24, 0xA0	; 160
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 02 03 	call	0x604	; 0x604 <LCD_String>
		break;
 680:	08 95       	ret
		case 2:
		LCD_Cmd(0xC0);
 682:	80 ec       	ldi	r24, 0xC0	; 192
 684:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
		LCD_String("                ");
 688:	80 ea       	ldi	r24, 0xA0	; 160
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 02 03 	call	0x604	; 0x604 <LCD_String>
 690:	08 95       	ret

00000692 <LCD_Clear>:
	}
}

void LCD_Clear()
{
	LCD_Cmd(0x01);
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Cmd>
 698:	08 95       	ret

0000069a <main>:
#include <avr/io.h>
#include "KeyPad.h"
#include <string.h>

int main(void)
{
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	c1 55       	subi	r28, 0x51	; 81
 6a4:	d1 09       	sbc	r29, r1
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	de bf       	out	0x3e, r29	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
 6b0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Init>
	LCD_Init();
 6b4:	0e 94 90 02 	call	0x520	; 0x520 <LCD_Init>
	LCD_Clear();
 6b8:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
	char str[16]="" , strAns[16]="", temp[16] = "";
 6bc:	1a 82       	std	Y+2, r1	; 0x02
 6be:	19 82       	std	Y+1, r1	; 0x01
 6c0:	8e e0       	ldi	r24, 0x0E	; 14
 6c2:	fe 01       	movw	r30, r28
 6c4:	33 96       	adiw	r30, 0x03	; 3
 6c6:	df 01       	movw	r26, r30
 6c8:	98 2f       	mov	r25, r24
 6ca:	1d 92       	st	X+, r1
 6cc:	9a 95       	dec	r25
 6ce:	e9 f7       	brne	.-6      	; 0x6ca <main+0x30>
 6d0:	1a 8a       	std	Y+18, r1	; 0x12
 6d2:	19 8a       	std	Y+17, r1	; 0x11
 6d4:	70 96       	adiw	r30, 0x10	; 16
 6d6:	df 01       	movw	r26, r30
 6d8:	98 2f       	mov	r25, r24
 6da:	1d 92       	st	X+, r1
 6dc:	9a 95       	dec	r25
 6de:	e9 f7       	brne	.-6      	; 0x6da <main+0x40>
 6e0:	1a a2       	std	Y+34, r1	; 0x22
 6e2:	19 a2       	std	Y+33, r1	; 0x21
 6e4:	70 96       	adiw	r30, 0x10	; 16
 6e6:	df 01       	movw	r26, r30
 6e8:	1d 92       	st	X+, r1
 6ea:	8a 95       	dec	r24
 6ec:	e9 f7       	brne	.-6      	; 0x6e8 <main+0x4e>
	char op=0;
	int num[16]={};
 6ee:	3e 96       	adiw	r30, 0x0e	; 14
 6f0:	80 e2       	ldi	r24, 0x20	; 32
 6f2:	df 01       	movw	r26, r30
 6f4:	1d 92       	st	X+, r1
 6f6:	8a 95       	dec	r24
 6f8:	e9 f7       	brne	.-6      	; 0x6f4 <main+0x5a>
	char begin1[16] = "A:+, B:-, C:/,  ";
	char begin2[16] = "D:=, #:clear    ";
	unsigned char res;
	int i = 0, pos=15,y=0,c=0,cnt=0,n=0,m=0,f=0,s=0;
 6fa:	a1 2c       	mov	r10, r1
 6fc:	b1 2c       	mov	r11, r1
{
	DIO_Init();
	LCD_Init();
	LCD_Clear();
	char str[16]="" , strAns[16]="", temp[16] = "";
	char op=0;
 6fe:	10 e0       	ldi	r17, 0x00	; 0
	{
		res = GetKey();
		if (res != 0 && res != '#')
		{
			LCD_Char(res);
			strncat(str,&res,1);
 700:	f0 97       	sbiw	r30, 0x30	; 48
 702:	7f 01       	movw	r14, r30
					itoa((num[0] + num[1]),strAns,10);
					break;
					case '-':
					if (num[0]<num[1])
					{
						strAns[0]='-';
 704:	0f 2e       	mov	r0, r31
 706:	fd e2       	ldi	r31, 0x2D	; 45
 708:	6f 2e       	mov	r6, r31
 70a:	f0 2d       	mov	r31, r0
	char begin2[16] = "D:=, #:clear    ";
	unsigned char res;
	int i = 0, pos=15,y=0,c=0,cnt=0,n=0,m=0,f=0,s=0;
	while (1)
	{
		res = GetKey();
 70c:	0e 94 3c 02 	call	0x478	; 0x478 <GetKey>
 710:	08 2f       	mov	r16, r24
 712:	62 96       	adiw	r28, 0x12	; 18
 714:	8f af       	std	Y+63, r24	; 0x3f
 716:	62 97       	sbiw	r28, 0x12	; 18
		if (res != 0 && res != '#')
 718:	88 23       	and	r24, r24
 71a:	c1 f3       	breq	.-16     	; 0x70c <main+0x72>
 71c:	83 32       	cpi	r24, 0x23	; 35
 71e:	09 f4       	brne	.+2      	; 0x722 <main+0x88>
 720:	ca c0       	rjmp	.+404    	; 0x8b6 <__stack+0x57>
		{
			LCD_Char(res);
 722:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Char>
			strncat(str,&res,1);
 726:	41 e0       	ldi	r20, 0x01	; 1
 728:	50 e0       	ldi	r21, 0x00	; 0
 72a:	be 01       	movw	r22, r28
 72c:	6f 5a       	subi	r22, 0xAF	; 175
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	c7 01       	movw	r24, r14
 732:	0e 94 ac 04 	call	0x958	; 0x958 <strncat>
			if (res == '=')
 736:	0d 33       	cpi	r16, 0x3D	; 61
 738:	49 f7       	brne	.-46     	; 0x70c <main+0x72>
 73a:	ce 01       	movw	r24, r28
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	4c 01       	movw	r8, r24
 740:	c1 2c       	mov	r12, r1
 742:	d1 2c       	mov	r13, r1
 744:	48 c0       	rjmp	.+144    	; 0x7d6 <main+0x13c>
			{
				for (i=0;i<strlen(str)-1;i++)
				{
					if (str[i]=='+' || str[i] == '-' || str[i] == 'x' || str[i] == '/')
 746:	d4 01       	movw	r26, r8
 748:	7d 90       	ld	r7, X+
 74a:	4d 01       	movw	r8, r26
 74c:	bf ef       	ldi	r27, 0xFF	; 255
 74e:	cb 1a       	sub	r12, r27
 750:	db 0a       	sbc	r13, r27
 752:	87 2d       	mov	r24, r7
 754:	8b 7f       	andi	r24, 0xFB	; 251
 756:	8b 32       	cpi	r24, 0x2B	; 43
 758:	31 f0       	breq	.+12     	; 0x766 <main+0xcc>
 75a:	ed e2       	ldi	r30, 0x2D	; 45
 75c:	7e 16       	cp	r7, r30
 75e:	19 f0       	breq	.+6      	; 0x766 <main+0xcc>
 760:	f8 e7       	ldi	r31, 0x78	; 120
 762:	7f 12       	cpse	r7, r31
 764:	38 c0       	rjmp	.+112    	; 0x7d6 <main+0x13c>
					{
						op = str[i];
						strncat(temp,&str,i);
 766:	b7 01       	movw	r22, r14
 768:	ce 01       	movw	r24, r28
 76a:	81 96       	adiw	r24, 0x21	; 33
 76c:	0e 94 ac 04 	call	0x958	; 0x958 <strncat>
						num[cnt] = atoi(temp);
 770:	ce 01       	movw	r24, r28
 772:	81 96       	adiw	r24, 0x21	; 33
 774:	0e 94 8e 04 	call	0x91c	; 0x91c <atoi>
 778:	f5 01       	movw	r30, r10
 77a:	ee 0f       	add	r30, r30
 77c:	ff 1f       	adc	r31, r31
 77e:	ee 0d       	add	r30, r14
 780:	ff 1d       	adc	r31, r15
 782:	91 ab       	std	Z+49, r25	; 0x31
 784:	80 ab       	std	Z+48, r24	; 0x30
						temp[0]=0;
 786:	19 a2       	std	Y+33, r1	; 0x21
						cnt++;
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	a8 1a       	sub	r10, r24
 78c:	b8 0a       	sbc	r11, r24
						for (c = i+1; c < strlen(str)-1; c++) strncat(temp,&str[c],1);
 78e:	86 01       	movw	r16, r12
 790:	0b c0       	rjmp	.+22     	; 0x7a8 <main+0x10e>
 792:	b7 01       	movw	r22, r14
 794:	60 0f       	add	r22, r16
 796:	71 1f       	adc	r23, r17
 798:	41 e0       	ldi	r20, 0x01	; 1
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	ce 01       	movw	r24, r28
 79e:	81 96       	adiw	r24, 0x21	; 33
 7a0:	0e 94 ac 04 	call	0x958	; 0x958 <strncat>
 7a4:	0f 5f       	subi	r16, 0xFF	; 255
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	f7 01       	movw	r30, r14
 7aa:	01 90       	ld	r0, Z+
 7ac:	00 20       	and	r0, r0
 7ae:	e9 f7       	brne	.-6      	; 0x7aa <main+0x110>
 7b0:	cf 01       	movw	r24, r30
 7b2:	8e 19       	sub	r24, r14
 7b4:	9f 09       	sbc	r25, r15
 7b6:	02 97       	sbiw	r24, 0x02	; 2
 7b8:	08 17       	cp	r16, r24
 7ba:	19 07       	cpc	r17, r25
 7bc:	50 f3       	brcs	.-44     	; 0x792 <main+0xf8>
						num[cnt] = atoi(temp);
 7be:	ce 01       	movw	r24, r28
 7c0:	81 96       	adiw	r24, 0x21	; 33
 7c2:	0e 94 8e 04 	call	0x91c	; 0x91c <atoi>
 7c6:	f5 01       	movw	r30, r10
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	ee 0d       	add	r30, r14
 7ce:	ff 1d       	adc	r31, r15
 7d0:	91 ab       	std	Z+49, r25	; 0x31
 7d2:	80 ab       	std	Z+48, r24	; 0x30
			{
				for (i=0;i<strlen(str)-1;i++)
				{
					if (str[i]=='+' || str[i] == '-' || str[i] == 'x' || str[i] == '/')
					{
						op = str[i];
 7d4:	17 2d       	mov	r17, r7
		{
			LCD_Char(res);
			strncat(str,&res,1);
			if (res == '=')
			{
				for (i=0;i<strlen(str)-1;i++)
 7d6:	f7 01       	movw	r30, r14
 7d8:	01 90       	ld	r0, Z+
 7da:	00 20       	and	r0, r0
 7dc:	e9 f7       	brne	.-6      	; 0x7d8 <main+0x13e>
 7de:	cf 01       	movw	r24, r30
 7e0:	8e 19       	sub	r24, r14
 7e2:	9f 09       	sbc	r25, r15
 7e4:	4c 2d       	mov	r20, r12
 7e6:	5d 2d       	mov	r21, r13
 7e8:	02 97       	sbiw	r24, 0x02	; 2
 7ea:	c8 16       	cp	r12, r24
 7ec:	d9 06       	cpc	r13, r25
 7ee:	08 f4       	brcc	.+2      	; 0x7f2 <main+0x158>
 7f0:	aa cf       	rjmp	.-172    	; 0x746 <main+0xac>
						for (c = i+1; c < strlen(str)-1; c++) strncat(temp,&str[c],1);
						num[cnt] = atoi(temp);
					}
					
				}
				switch (op)
 7f2:	1d 32       	cpi	r17, 0x2D	; 45
 7f4:	c1 f0       	breq	.+48     	; 0x826 <main+0x18c>
 7f6:	18 f4       	brcc	.+6      	; 0x7fe <main+0x164>
 7f8:	1b 32       	cpi	r17, 0x2B	; 43
 7fa:	39 f0       	breq	.+14     	; 0x80a <main+0x170>
 7fc:	52 c0       	rjmp	.+164    	; 0x8a2 <__stack+0x43>
 7fe:	1f 32       	cpi	r17, 0x2F	; 47
 800:	09 f4       	brne	.+2      	; 0x804 <main+0x16a>
 802:	41 c0       	rjmp	.+130    	; 0x886 <__stack+0x27>
 804:	18 37       	cpi	r17, 0x78	; 120
 806:	59 f1       	breq	.+86     	; 0x85e <main+0x1c4>
 808:	4c c0       	rjmp	.+152    	; 0x8a2 <__stack+0x43>
				{
					case '+':
					itoa((num[0] + num[1]),strAns,10);
 80a:	29 a9       	ldd	r18, Y+49	; 0x31
 80c:	3a a9       	ldd	r19, Y+50	; 0x32
 80e:	8b a9       	ldd	r24, Y+51	; 0x33
 810:	9c a9       	ldd	r25, Y+52	; 0x34
 812:	4a e0       	ldi	r20, 0x0A	; 10
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	be 01       	movw	r22, r28
 818:	6f 5e       	subi	r22, 0xEF	; 239
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	82 0f       	add	r24, r18
 81e:	93 1f       	adc	r25, r19
 820:	0e 94 bc 04 	call	0x978	; 0x978 <itoa>
					break;
 824:	3e c0       	rjmp	.+124    	; 0x8a2 <__stack+0x43>
					case '-':
					if (num[0]<num[1])
 826:	89 a9       	ldd	r24, Y+49	; 0x31
 828:	9a a9       	ldd	r25, Y+50	; 0x32
 82a:	2b a9       	ldd	r18, Y+51	; 0x33
 82c:	3c a9       	ldd	r19, Y+52	; 0x34
 82e:	82 17       	cp	r24, r18
 830:	93 07       	cpc	r25, r19
 832:	5c f4       	brge	.+22     	; 0x84a <main+0x1b0>
					{
						strAns[0]='-';
 834:	69 8a       	std	Y+17, r6	; 0x11
						itoa((num[0] - num[1]),strAns,10);
 836:	4a e0       	ldi	r20, 0x0A	; 10
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	be 01       	movw	r22, r28
 83c:	6f 5e       	subi	r22, 0xEF	; 239
 83e:	7f 4f       	sbci	r23, 0xFF	; 255
 840:	82 1b       	sub	r24, r18
 842:	93 0b       	sbc	r25, r19
 844:	0e 94 bc 04 	call	0x978	; 0x978 <itoa>
 848:	2c c0       	rjmp	.+88     	; 0x8a2 <__stack+0x43>
					}
					else  itoa((num[0] - num[1]),strAns,10);
 84a:	4a e0       	ldi	r20, 0x0A	; 10
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	be 01       	movw	r22, r28
 850:	6f 5e       	subi	r22, 0xEF	; 239
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	82 1b       	sub	r24, r18
 856:	93 0b       	sbc	r25, r19
 858:	0e 94 bc 04 	call	0x978	; 0x978 <itoa>
 85c:	22 c0       	rjmp	.+68     	; 0x8a2 <__stack+0x43>
					break;
					case 'x':
					itoa((num[0] * num[1]),strAns,10);
 85e:	29 a9       	ldd	r18, Y+49	; 0x31
 860:	3a a9       	ldd	r19, Y+50	; 0x32
 862:	8b a9       	ldd	r24, Y+51	; 0x33
 864:	9c a9       	ldd	r25, Y+52	; 0x34
 866:	4a e0       	ldi	r20, 0x0A	; 10
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	be 01       	movw	r22, r28
 86c:	6f 5e       	subi	r22, 0xEF	; 239
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	dc 01       	movw	r26, r24
 872:	2a 9f       	mul	r18, r26
 874:	c0 01       	movw	r24, r0
 876:	2b 9f       	mul	r18, r27
 878:	90 0d       	add	r25, r0
 87a:	3a 9f       	mul	r19, r26
 87c:	90 0d       	add	r25, r0
 87e:	11 24       	eor	r1, r1
 880:	0e 94 bc 04 	call	0x978	; 0x978 <itoa>
					break;
 884:	0e c0       	rjmp	.+28     	; 0x8a2 <__stack+0x43>
					case '/':
					itoa((num[0] / num[1]),strAns,10);
 886:	89 a9       	ldd	r24, Y+49	; 0x31
 888:	9a a9       	ldd	r25, Y+50	; 0x32
 88a:	6b a9       	ldd	r22, Y+51	; 0x33
 88c:	7c a9       	ldd	r23, Y+52	; 0x34
 88e:	0e 94 66 04 	call	0x8cc	; 0x8cc <__divmodhi4>
 892:	cb 01       	movw	r24, r22
 894:	4a e0       	ldi	r20, 0x0A	; 10
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	be 01       	movw	r22, r28
 89a:	6f 5e       	subi	r22, 0xEF	; 239
 89c:	7f 4f       	sbci	r23, 0xFF	; 255
 89e:	0e 94 bc 04 	call	0x978	; 0x978 <itoa>
					break;
				}
				//LCD_Clear();
				LCD_ClearbyLine(1);
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	0e 94 34 03 	call	0x668	; 0x668 <LCD_ClearbyLine>
				LCD_StringPos(strAns,1,0);
 8a8:	40 e0       	ldi	r20, 0x00	; 0
 8aa:	61 e0       	ldi	r22, 0x01	; 1
 8ac:	ce 01       	movw	r24, r28
 8ae:	41 96       	adiw	r24, 0x11	; 17
 8b0:	0e 94 18 03 	call	0x630	; 0x630 <LCD_StringPos>
 8b4:	2b cf       	rjmp	.-426    	; 0x70c <main+0x72>
			}
		}
		else if (res == '#')
		{
			LCD_Clear();
 8b6:	0e 94 49 03 	call	0x692	; 0x692 <LCD_Clear>
			num[0]= 0;
 8ba:	1a aa       	std	Y+50, r1	; 0x32
 8bc:	19 aa       	std	Y+49, r1	; 0x31
			temp[0]= 0;
 8be:	19 a2       	std	Y+33, r1	; 0x21
			str[0]= 0;
 8c0:	19 82       	std	Y+1, r1	; 0x01
			strAns[0]=0;
 8c2:	19 8a       	std	Y+17, r1	; 0x11
			op= 0;
			cnt=0;
 8c4:	a1 2c       	mov	r10, r1
 8c6:	b1 2c       	mov	r11, r1
			LCD_Clear();
			num[0]= 0;
			temp[0]= 0;
			str[0]= 0;
			strAns[0]=0;
			op= 0;
 8c8:	10 e0       	ldi	r17, 0x00	; 0
 8ca:	20 cf       	rjmp	.-448    	; 0x70c <main+0x72>

000008cc <__divmodhi4>:
 8cc:	97 fb       	bst	r25, 7
 8ce:	07 2e       	mov	r0, r23
 8d0:	16 f4       	brtc	.+4      	; 0x8d6 <__divmodhi4+0xa>
 8d2:	00 94       	com	r0
 8d4:	07 d0       	rcall	.+14     	; 0x8e4 <__divmodhi4_neg1>
 8d6:	77 fd       	sbrc	r23, 7
 8d8:	09 d0       	rcall	.+18     	; 0x8ec <__divmodhi4_neg2>
 8da:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__udivmodhi4>
 8de:	07 fc       	sbrc	r0, 7
 8e0:	05 d0       	rcall	.+10     	; 0x8ec <__divmodhi4_neg2>
 8e2:	3e f4       	brtc	.+14     	; 0x8f2 <__divmodhi4_exit>

000008e4 <__divmodhi4_neg1>:
 8e4:	90 95       	com	r25
 8e6:	81 95       	neg	r24
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	08 95       	ret

000008ec <__divmodhi4_neg2>:
 8ec:	70 95       	com	r23
 8ee:	61 95       	neg	r22
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255

000008f2 <__divmodhi4_exit>:
 8f2:	08 95       	ret

000008f4 <__udivmodhi4>:
 8f4:	aa 1b       	sub	r26, r26
 8f6:	bb 1b       	sub	r27, r27
 8f8:	51 e1       	ldi	r21, 0x11	; 17
 8fa:	07 c0       	rjmp	.+14     	; 0x90a <__udivmodhi4_ep>

000008fc <__udivmodhi4_loop>:
 8fc:	aa 1f       	adc	r26, r26
 8fe:	bb 1f       	adc	r27, r27
 900:	a6 17       	cp	r26, r22
 902:	b7 07       	cpc	r27, r23
 904:	10 f0       	brcs	.+4      	; 0x90a <__udivmodhi4_ep>
 906:	a6 1b       	sub	r26, r22
 908:	b7 0b       	sbc	r27, r23

0000090a <__udivmodhi4_ep>:
 90a:	88 1f       	adc	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	5a 95       	dec	r21
 910:	a9 f7       	brne	.-22     	; 0x8fc <__udivmodhi4_loop>
 912:	80 95       	com	r24
 914:	90 95       	com	r25
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	08 95       	ret

0000091c <atoi>:
 91c:	fc 01       	movw	r30, r24
 91e:	88 27       	eor	r24, r24
 920:	99 27       	eor	r25, r25
 922:	e8 94       	clt
 924:	21 91       	ld	r18, Z+
 926:	20 32       	cpi	r18, 0x20	; 32
 928:	e9 f3       	breq	.-6      	; 0x924 <atoi+0x8>
 92a:	29 30       	cpi	r18, 0x09	; 9
 92c:	10 f0       	brcs	.+4      	; 0x932 <atoi+0x16>
 92e:	2e 30       	cpi	r18, 0x0E	; 14
 930:	c8 f3       	brcs	.-14     	; 0x924 <atoi+0x8>
 932:	2b 32       	cpi	r18, 0x2B	; 43
 934:	41 f0       	breq	.+16     	; 0x946 <atoi+0x2a>
 936:	2d 32       	cpi	r18, 0x2D	; 45
 938:	39 f4       	brne	.+14     	; 0x948 <atoi+0x2c>
 93a:	68 94       	set
 93c:	04 c0       	rjmp	.+8      	; 0x946 <atoi+0x2a>
 93e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__mulhi_const_10>
 942:	82 0f       	add	r24, r18
 944:	91 1d       	adc	r25, r1
 946:	21 91       	ld	r18, Z+
 948:	20 53       	subi	r18, 0x30	; 48
 94a:	2a 30       	cpi	r18, 0x0A	; 10
 94c:	c0 f3       	brcs	.-16     	; 0x93e <atoi+0x22>
 94e:	1e f4       	brtc	.+6      	; 0x956 <atoi+0x3a>
 950:	90 95       	com	r25
 952:	81 95       	neg	r24
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <strncat>:
 958:	fb 01       	movw	r30, r22
 95a:	dc 01       	movw	r26, r24
 95c:	0d 90       	ld	r0, X+
 95e:	00 20       	and	r0, r0
 960:	e9 f7       	brne	.-6      	; 0x95c <strncat+0x4>
 962:	11 97       	sbiw	r26, 0x01	; 1
 964:	41 50       	subi	r20, 0x01	; 1
 966:	50 40       	sbci	r21, 0x00	; 0
 968:	28 f0       	brcs	.+10     	; 0x974 <strncat+0x1c>
 96a:	01 90       	ld	r0, Z+
 96c:	00 20       	and	r0, r0
 96e:	0d 92       	st	X+, r0
 970:	c9 f7       	brne	.-14     	; 0x964 <strncat+0xc>
 972:	08 95       	ret
 974:	1c 92       	st	X, r1
 976:	08 95       	ret

00000978 <itoa>:
 978:	45 32       	cpi	r20, 0x25	; 37
 97a:	51 05       	cpc	r21, r1
 97c:	20 f4       	brcc	.+8      	; 0x986 <itoa+0xe>
 97e:	42 30       	cpi	r20, 0x02	; 2
 980:	10 f0       	brcs	.+4      	; 0x986 <itoa+0xe>
 982:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__itoa_ncheck>
 986:	fb 01       	movw	r30, r22
 988:	10 82       	st	Z, r1
 98a:	cb 01       	movw	r24, r22
 98c:	08 95       	ret

0000098e <__itoa_ncheck>:
 98e:	bb 27       	eor	r27, r27
 990:	4a 30       	cpi	r20, 0x0A	; 10
 992:	31 f4       	brne	.+12     	; 0x9a0 <__itoa_ncheck+0x12>
 994:	99 23       	and	r25, r25
 996:	22 f4       	brpl	.+8      	; 0x9a0 <__itoa_ncheck+0x12>
 998:	bd e2       	ldi	r27, 0x2D	; 45
 99a:	90 95       	com	r25
 99c:	81 95       	neg	r24
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__utoa_common>

000009a4 <__mulhi_const_10>:
 9a4:	7a e0       	ldi	r23, 0x0A	; 10
 9a6:	97 9f       	mul	r25, r23
 9a8:	90 2d       	mov	r25, r0
 9aa:	87 9f       	mul	r24, r23
 9ac:	80 2d       	mov	r24, r0
 9ae:	91 0d       	add	r25, r1
 9b0:	11 24       	eor	r1, r1
 9b2:	08 95       	ret

000009b4 <__utoa_ncheck>:
 9b4:	bb 27       	eor	r27, r27

000009b6 <__utoa_common>:
 9b6:	fb 01       	movw	r30, r22
 9b8:	55 27       	eor	r21, r21
 9ba:	aa 27       	eor	r26, r26
 9bc:	88 0f       	add	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	aa 1f       	adc	r26, r26
 9c2:	a4 17       	cp	r26, r20
 9c4:	10 f0       	brcs	.+4      	; 0x9ca <__utoa_common+0x14>
 9c6:	a4 1b       	sub	r26, r20
 9c8:	83 95       	inc	r24
 9ca:	50 51       	subi	r21, 0x10	; 16
 9cc:	b9 f7       	brne	.-18     	; 0x9bc <__utoa_common+0x6>
 9ce:	a0 5d       	subi	r26, 0xD0	; 208
 9d0:	aa 33       	cpi	r26, 0x3A	; 58
 9d2:	08 f0       	brcs	.+2      	; 0x9d6 <__utoa_common+0x20>
 9d4:	a9 5d       	subi	r26, 0xD9	; 217
 9d6:	a1 93       	st	Z+, r26
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	79 f7       	brne	.-34     	; 0x9ba <__utoa_common+0x4>
 9dc:	b1 11       	cpse	r27, r1
 9de:	b1 93       	st	Z+, r27
 9e0:	11 92       	st	Z+, r1
 9e2:	cb 01       	movw	r24, r22
 9e4:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <strrev>

000009e8 <strrev>:
 9e8:	dc 01       	movw	r26, r24
 9ea:	fc 01       	movw	r30, r24
 9ec:	67 2f       	mov	r22, r23
 9ee:	71 91       	ld	r23, Z+
 9f0:	77 23       	and	r23, r23
 9f2:	e1 f7       	brne	.-8      	; 0x9ec <strrev+0x4>
 9f4:	32 97       	sbiw	r30, 0x02	; 2
 9f6:	04 c0       	rjmp	.+8      	; 0xa00 <strrev+0x18>
 9f8:	7c 91       	ld	r23, X
 9fa:	6d 93       	st	X+, r22
 9fc:	70 83       	st	Z, r23
 9fe:	62 91       	ld	r22, -Z
 a00:	ae 17       	cp	r26, r30
 a02:	bf 07       	cpc	r27, r31
 a04:	c8 f3       	brcs	.-14     	; 0x9f8 <strrev+0x10>
 a06:	08 95       	ret

00000a08 <_exit>:
 a08:	f8 94       	cli

00000a0a <__stop_program>:
 a0a:	ff cf       	rjmp	.-2      	; 0xa0a <__stop_program>
